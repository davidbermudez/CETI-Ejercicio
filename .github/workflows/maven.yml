name: Maven CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Build project with Maven
      run: mvn clean package -DskipTests
      
    - name: push changes to remote
      run: |
        git config user.name "davidbermudez"
        git config user.email "davidbermmudez@jerez.es"
        git add -f webapp/target/*.war
        git commit -m "From Action GH"
        git push
    # - name: Build with Maven
    #   run: mvn compile
    # - name: Test with Maven
    #   run: mvn test
    # - name: Package with maven
    #  run: mvn clean package -DskipTests  # mvn package
    # - run: mkdir artifact && cp webapp/target/*.war artifact
    # - uses: actions/upload-artifact@v2
    #   with:
    #    name: Package
    #    path: artifact  

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: .
        push: true 
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/maven-app:test
  
  Deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.HOSTNAME  }}
            USER_NAME : ${{ secrets.USER_NAME  }}
            
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          
            # Now we have got the access of EC2 and we will start the deploy .
            docker stop web1 && docker rm web1
            docker run -d -ti -p 80:8080 --name web1 ${{ secrets.DOCKERHUB_USERNAME }}/maven-app:test
            sleep 20
            curl http://localhost/webapp/
          '
